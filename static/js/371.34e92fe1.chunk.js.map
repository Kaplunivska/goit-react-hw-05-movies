{"version":3,"file":"static/js/371.34e92fe1.chunk.js","mappings":"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","sources":["components/Button/Button.jsx","components/Button/Button.styled.js","components/Loader/Loader.jsx","components/Gallery/Gallery.props.js","components/Gallery/Gallery.jsx","hooks/useFetchMovieAPI.js","components/MoviesList/MoviesList.props.js","components/MoviesList/MoviesList.jsx","components/SearchInput/SearchInput.props.js","components/SearchInput/SearchInput.jsx","pages/Movies/Movies.page.jsx"],"sourcesContent":["import { Button } from '@mui/material';\nimport { NavLink } from 'react-router-dom';\nimport ForwardRoundedIcon from '@mui/icons-material/ForwardRounded';\n\nexport const ButtonLink = ({ children, to, ...props }) => (\n  <Button component={NavLink} to={to} {...props}>\n    {children}\n  </Button>\n);\n\nexport const BackButtonLink = ({ children, to }) => (\n  <ButtonLink\n    to={to}\n    startIcon={<ForwardRoundedIcon sx={{ transform: 'rotate(180deg)' }} />}\n  >\n    {children}\n  </ButtonLink>\n);","import styled from '@emotion/styled';\nimport { Button } from '@mui/material';\n\nexport const LoadMoreButton = styled(Button)`\n  display: block;\n  margin: 0 auto;\n  margin-top: ${({ theme }) => theme.spacing(3)};\n`;","import { Box } from '@mui/material';\nimport { RiseLoader } from 'react-spinners';\n\nexport default function Loader(props) {\n  return (\n    <Box {...props}>\n      <RiseLoader\n        size={10}\n        color=\"#DodgerBlue\"\n        cssOverride={{\n          display: 'flex',\n          justifyContent: 'center',\n          margin: '10px 0',\n        }}\n      />\n    </Box>\n  );\n}","import PropTypes from 'prop-types';\n\nexport const GalleryPropTypes = {\n  queryKey: PropTypes.oneOfType([PropTypes.string, PropTypes.array]).isRequired,\n  queryFn: PropTypes.func.isRequired,\n  component: PropTypes.elementType.isRequired,\n  enabled: PropTypes.bool,\n};","import { LoadMoreButton } from 'components/Button';\nimport Loader from 'components/Loader';\nimport { useFetchMovieAPI } from 'hooks/useFetchMovieAPI';\nimport uniqBy from 'lodash.uniqby';\nimport { GalleryPropTypes } from './Gallery.props';\n\nexport default function Gallery({\n  queryKey,\n  queryFn,\n  component: Component,\n  enabled = true,\n}) {\n    const {\n        isFetching,\n        isError,\n        error,\n        data: moviesList,\n        hasNextPage,\n        fetchNextPage,      \n    } = useFetchMovieAPI(queryKey, queryFn,querySelectFn, enabled);\n\n    function querySelectFn(data) {\n        return uniqBy(\n      data.pages.reduce((acc, page) => [...acc, ...page.results], []),\n      'id'\n        );\n    }\n\n    if (isError) {\n        return <h2>{error.message}</h2>;\n    }\n   \n    return (\n    <>\n     {moviesList && \n       (moviesList.length === 0 ? (\n        <h2>Movies not found</h2>\n       ) : (\n        <Component list={moviesList} />\n       ))}\n\n       {isFetching && <Loader mt={3} />}\n\n       {!isFetching && hasNextPage && (\n        <LoadMoreButton onClick={fetchNextPage}>Load more</LoadMoreButton>\n       )}\n    </>\n    );\n}\nGallery.propTypes = GalleryPropTypes;","import { useInfiniteQuery } from \"react-query\";\n\nexport const useFetchMovieAPI = (key, fn, select, enabled = true) => {\n    const query = useInfiniteQuery({\n    queryKey: key,\n    queryFn: ({ pageParam }) =>fn(pageParam),\n    enabled: enabled,\n    getNextPageParam: (lastPage, allPages) => {\n        if (allPages.length < lastPage.total_pages) {\n         return allPages.length + 1;\n        }\n    },\n    select,\n    });\n\n    return query;\n};","import PropTypes from 'prop-types';\n\nexport const MoviesListPropTypes = {\n  list: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      poster_path: PropTypes.string,\n      title: PropTypes.string.isRequired,\n    }).isRequired\n  ).isRequired,\n};","import { Card, CardActionArea, CardMedia, Grid } from '@mui/material';\nimport { Link, useLocation } from 'react-router-dom';\nimport config from 'config';\nimport { MoviesListPropTypes } from './MoviesList.props';\n\nexport default function MoviesList({ list }) {\n    \n  const location = useLocation();\n  const path = location.pathname === '/' ? 'movies/' : '';\n\n  return (\n    <Grid\n      container\n      spacing={{ xs: 2, md: 3 }}\n      columns={{ xs: 4, sm: 8, md: 15 }}\n    >\n      {list.map(({ id, poster_path, title }) => {\n        const imageSrc = poster_path\n          ? `${config.urls.theMovies.image.poster}${poster_path}`\n          : '';\n        return (\n          <Grid item xs={2} sm={2} md={3} key={id}>\n            <Card sx={{ maxWidth: 250, height: '100%' }}>\n              <CardActionArea\n                component={Link}\n                to={`${path}${id}`}\n                state={{ from: location }}\n                sx={{ height: '100%' }}\n              >\n                <CardMedia\n                  component=\"img\"\n                  height=\"250\"\n                  image={imageSrc}\n                  alt={title}\n                  sx={{ height: '100%', objectFit: 'cover' }}\n                />\n              </CardActionArea>\n            </Card>\n          </Grid>\n        );\n      })}\n    </Grid>\n  );\n}\n\nMoviesList.propTypes = MoviesListPropTypes;\n","import PropTypes from 'prop-types';\n\nexport const SearchInputPropTypes = {\n  value: PropTypes.string.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired,\n};","import { Divider, IconButton, InputBase, Paper } from '@mui/material';\nimport SearchIcon from '@mui/icons-material/Search';\nimport { SearchInputPropTypes } from './SearchInput.props';\n\nexport default function SearchInput({ onSubmit, onChange, value }) {\n  return (\n    <Paper\n      component=\"form\"\n      sx={{\n        p: '2px 4px',\n        display: 'flex',\n        alignItems: 'center',\n        width: 400,\n        mx: 'auto',\n        mb: 3,\n      }}\n      onSubmit={onSubmit}\n    >\n      <IconButton type=\"submit\" sx={{ p: '10px' }} aria-label=\"search\">\n        <SearchIcon />\n      </IconButton>\n      <Divider sx={{ height: 28, m: 0.5 }} orientation=\"vertical\" />\n      <InputBase\n        sx={{ ml: 1, flex: 1 }}\n        placeholder=\"Search movies\"\n        inputProps={{ 'aria-label': 'search movie' }}\n        value={value}\n        onChange={onChange}\n      />\n    </Paper>\n  );\n}\n\nSearchInput.propTypes = SearchInputPropTypes;","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport Gallery from 'components/Gallery';\nimport TheMovieAPI from 'services/theMovieAPI';\nimport MoviesList from 'components/MoviesList';\nimport SearchInput from 'components/SearchInput';\n\nexport default function Movies() {\n  const [findQuery, setFindQuery] = useState('');\n\n  const [searchQuery, setSearchQuery] = useSearchParams();\n  const query = searchQuery.get('query') ?? '';\n\n  useEffect(() => {\n    if (!query.length) return;\n\n    setFindQuery(query);\n    // eslint-disable-next-line\n  }, []);\n\n  const submitHandler = evt => {\n    evt.preventDefault();\n    setFindQuery(query);\n  };\n  const changeSearchHandler = evt => {\n    const { value } = evt.target;\n\n    if (value.length === 0) return setSearchQuery({});\n\n    setSearchQuery({\n      query: value.trim().toLocaleLowerCase(),\n    });\n  };\n\n  return (\n    <>\n      <SearchInput\n        value={query}\n        onSubmit={submitHandler}\n        onChange={changeSearchHandler}\n      />\n\n      <Gallery\n        queryKey={['seqrch-movie', findQuery]}\n        queryFn={pageParam =>\n          TheMovieAPI.getMoviesBySearchQuery(findQuery, pageParam)\n        }\n        component={MoviesList}\n        enabled={findQuery.length > 0}\n      />\n    </>\n  );\n}\n\n"],"names":["ButtonLink","children","to","props","component","NavLink","BackButtonLink","startIcon","sx","transform","LoadMoreButton","styled","Button","theme","spacing","Loader","Box","RiseLoader","size","color","cssOverride","display","justifyContent","margin","PropTypes","isRequired","Gallery","queryKey","queryFn","Component","enabled","key","fn","select","query","useInfiniteQuery","pageParam","getNextPageParam","lastPage","allPages","length","total_pages","useFetchMovieAPI","data","uniqBy","pages","reduce","acc","page","results","isFetching","isError","error","moviesList","hasNextPage","fetchNextPage","message","list","mt","onClick","id","poster_path","title","MoviesList","location","useLocation","path","pathname","Grid","container","xs","md","columns","sm","map","imageSrc","config","item","Card","maxWidth","height","CardActionArea","Link","state","from","CardMedia","image","alt","objectFit","SearchInput","onSubmit","onChange","value","Paper","p","alignItems","width","mx","mb","IconButton","type","Search","Divider","m","orientation","InputBase","ml","flex","placeholder","inputProps","Movies","useState","findQuery","setFindQuery","useSearchParams","searchQuery","setSearchQuery","get","useEffect","evt","preventDefault","target","trim","toLocaleLowerCase","TheMovieAPI"],"sourceRoot":""}